using CommandLine;
using DynamicData;
using Mutagen.Bethesda;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.WPF.Reflection.Attributes;
using Noggog;
using System.Runtime.Serialization;
using Activator = Mutagen.Bethesda.Skyrim.Activator;

namespace BlacksmithForgeWater
{
    public class Settings
    {
        [SettingName("Blacksmith Forges")]
        public List<IFormLinkGetter<IFurnitureGetter>> BlacksmithForgeList = new()
        {
            Skyrim.Furniture.CraftingBlackSmithForge,
            Skyrim.Furniture.CraftingBlackSmithForgeWR,
            Dawnguard.Furniture.DLC1DawnguardCraftingBlackSmithForge,
            Dragonborn.Furniture.DLC2CraftingBlackSmithForge,
            Dragonborn.Furniture.DLC2CraftingBlackSmithSkaalForge,
            
        };

        [SettingName("Blacksmith Skyforges")]
        public List<IFormLinkGetter<IFurnitureGetter>> BlacksmithSkyforgeList = new()
        {
            Skyrim.Furniture.CraftingBlackSmithForgeSkyforge
        };
    }

    public class Program
    {
        public static Lazy<Settings>? _settings = null!;

        private static readonly Dictionary<FormKey, Activator> BSWF_List = new();

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetTypicalOpen(GameRelease.SkyrimSE, "YourPatcher.esp")
                .SetAutogeneratedSettings(nickname: "Settings", path: "settings.json", out _settings)
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            int iForgeCounter = 0;

            // Forge Water Bounds
            var forgeBounds = new ObjectBounds();
            forgeBounds.First = new P3Int16(51, -92, 0);
            forgeBounds.Second = new P3Int16(143, 13, 32);

            // Forge Models
            var forgeModel = new Model();
            forgeModel.File = "clutter\\horsetrough\\horsetrough_bs2.nif";
            var skyforgeModel = new Model();
            skyforgeModel.File = "clutter\\horsetrough\\horsetrough_sf2.nif";

            // Create Forge Water Activator
            var forgeWater = state.PatchMod.Activators.AddNew();
            forgeWater.EditorID = "HorseTroughBS";
            forgeWater.Model = forgeModel;
            forgeWater.ObjectBounds = forgeBounds;
            forgeWater.WaterType = new FormLinkNullable<IWaterGetter>(FormKey.Factory("0F762D:Skyrim.esm"));
            forgeWater.Flags = Activator.Flag.NoDisplacement;
            forgeWater.MarkerColor = System.Drawing.Color.FromArgb(204, 76, 51);

            // Create Skyforge Water Activator
            var skyforgeWater = state.PatchMod.Activators.AddNew();
            skyforgeWater.EditorID = "HorseTroughSF";
            skyforgeWater.Model = skyforgeModel;
            skyforgeWater.ObjectBounds = forgeBounds;
            skyforgeWater.WaterType = new FormLinkNullable<IWaterGetter>(FormKey.Factory("0F762D:Skyrim.esm"));
            skyforgeWater.Flags = Activator.Flag.NoDisplacement;
            skyforgeWater.MarkerColor = System.Drawing.Color.FromArgb(204, 76, 51);

            // Create Dictionary
            Console.WriteLine($"Getting Forges...");
            List<IFormLinkGetter<IFurnitureGetter>> forgeList = _settings != null ? _settings.Value.BlacksmithForgeList : new();
            List<IFormLinkGetter<IFurnitureGetter>> skyforgeList = _settings != null ? _settings.Value.BlacksmithSkyforgeList : new();
            foreach(var forge in forgeList) BSWF_List.Add(forge.FormKey, forgeWater);
            foreach(var forge in skyforgeList) BSWF_List.Add(forge.FormKey, skyforgeWater);

            // Get Forge List
            Console.WriteLine($"Processing Forges...");
            foreach (var placed in state.LoadOrder.PriorityOrder.PlacedObject().WinningContextOverrides(state.LinkCache))
            {
                if (BSWF_List.TryGetValue(placed.Record?.Base.FormKey ?? new FormKey(), out var waterActivator))
                {
                    // Copy the Cell/World Record first and add Water flag
                    if (placed.TryGetParent<ICellGetter>(out var foundCell))
                    {
                        var foundOverride = state.LoadOrder.PriorityOrder.Cell().WinningContextOverrides(state.LinkCache).SingleOrDefault(x => x.Record.FormKey == foundCell.FormKey);
                        var WorkingCell = foundOverride?.GetOrAddAsOverride(state.PatchMod);
                        if (WorkingCell != null)
                        {
                            WorkingCell.Flags |= Cell.Flag.HasWater;

                            // Make a new object originating from the patch mod
                            var bsfwActivator = new PlacedObject(state.PatchMod);

                            // Do whatever
                            WorkingCell.Persistent.Add(bsfwActivator);

                            // Set our base to the activator
                            bsfwActivator.Base.SetTo(waterActivator.FormKey);

                            // Modify Editor ID
                            bsfwActivator.EditorID = "BSForgeWater_" + iForgeCounter.ToString();

                            // Set Scale
                            bsfwActivator.Scale = placed.Record?.Scale;

                            // Set Enabled Parent info
                            EnableParent bsfwParent = new EnableParent();
                            bsfwParent.Flags = placed.Record?.EnableParent?.Flags ?? new EnableParent.Flag();
                            bsfwParent.Reference.FormKey = placed.Record?.EnableParent?.Reference.FormKey ?? Skyrim.Npc.Player.FormKey;
                            bsfwActivator.EnableParent = bsfwParent;

                            // Position Data
                            Placement bsfwPlacement = new Placement();
                            bsfwPlacement.Position = placed.Record?.Placement?.Position ?? new Placement().Position;
                            bsfwPlacement.Rotation = placed.Record?.Placement?.Rotation ?? new Placement().Rotation;
                            bsfwActivator.Placement = bsfwPlacement;

                            // Add original flags and add any flags from the original
                            bsfwActivator.MajorRecordFlagsRaw = placed.Record?.MajorRecordFlagsRaw ?? 0;
                            bsfwActivator.MajorRecordFlagsRaw |= 0x400;

                            iForgeCounter++;
                        }
                    }
                }   
            }
            Console.WriteLine($"Found " + iForgeCounter + " forges");
        }
    }
}
